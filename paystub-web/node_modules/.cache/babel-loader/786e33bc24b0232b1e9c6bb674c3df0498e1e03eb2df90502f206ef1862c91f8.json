{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:5000/api'; // We'll create this Python Flask backend\n\nexport const databaseService = {\n  // Individual operations\n  async getIndividuals() {\n    const response = await axios.get(`${API_BASE_URL}/individuals`);\n    return response.data;\n  },\n  async updateIndividualInfo(name, data) {\n    const response = await axios.put(`${API_BASE_URL}/individuals/${encodeURIComponent(name)}`, data);\n    return response.data;\n  },\n  // Paystub operations\n  async getPaystubs(individualId = null) {\n    const url = individualId ? `${API_BASE_URL}/pay-statements/${individualId}` : `${API_BASE_URL}/pay-statements`;\n    const response = await axios.get(url);\n    return response.data;\n  },\n  async savePaystub(data) {\n    const response = await axios.post(`${API_BASE_URL}/pay-statements`, data);\n    return response.data;\n  },\n  async deletePaystub(id) {\n    const response = await axios.delete(`${API_BASE_URL}/pay-statements/${id}`);\n    return response.data;\n  },\n  // Process PDF and save to database\n  async processPdfAndSave(pdfData, filename) {\n    const formData = new FormData();\n    formData.append('pdf', new Blob([pdfData], {\n      type: 'application/pdf'\n    }), filename);\n    const response = await axios.post(`${API_BASE_URL}/process-pdf`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","databaseService","getIndividuals","response","get","data","updateIndividualInfo","name","put","encodeURIComponent","getPaystubs","individualId","url","savePaystub","post","deletePaystub","id","delete","processPdfAndSave","pdfData","filename","formData","FormData","append","Blob","type","headers"],"sources":["/Users/mattermost/Documents/paystub/paystub-web/src/utils/databaseService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'http://localhost:5000/api'; // We'll create this Python Flask backend\n\nexport const databaseService = {\n  // Individual operations\n  async getIndividuals() {\n    const response = await axios.get(`${API_BASE_URL}/individuals`);\n    return response.data;\n  },\n\n  async updateIndividualInfo(name, data) {\n    const response = await axios.put(`${API_BASE_URL}/individuals/${encodeURIComponent(name)}`, data);\n    return response.data;\n  },\n\n  // Paystub operations\n  async getPaystubs(individualId = null) {\n    const url = individualId \n      ? `${API_BASE_URL}/pay-statements/${individualId}`\n      : `${API_BASE_URL}/pay-statements`;\n    const response = await axios.get(url);\n    return response.data;\n  },\n\n  async savePaystub(data) {\n    const response = await axios.post(`${API_BASE_URL}/pay-statements`, data);\n    return response.data;\n  },\n\n  async deletePaystub(id) {\n    const response = await axios.delete(`${API_BASE_URL}/pay-statements/${id}`);\n    return response.data;\n  },\n\n  // Process PDF and save to database\n  async processPdfAndSave(pdfData, filename) {\n    const formData = new FormData();\n    formData.append('pdf', new Blob([pdfData], { type: 'application/pdf' }), filename);\n    \n    const response = await axios.post(`${API_BASE_URL}/process-pdf`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data;\n  },\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,2BAA2B,CAAC,CAAC;;AAElD,OAAO,MAAMC,eAAe,GAAG;EAC7B;EACA,MAAMC,cAAcA,CAAA,EAAG;IACrB,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAC,GAAGJ,YAAY,cAAc,CAAC;IAC/D,OAAOG,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED,MAAMC,oBAAoBA,CAACC,IAAI,EAAEF,IAAI,EAAE;IACrC,MAAMF,QAAQ,GAAG,MAAMJ,KAAK,CAACS,GAAG,CAAC,GAAGR,YAAY,gBAAgBS,kBAAkB,CAACF,IAAI,CAAC,EAAE,EAAEF,IAAI,CAAC;IACjG,OAAOF,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACA,MAAMK,WAAWA,CAACC,YAAY,GAAG,IAAI,EAAE;IACrC,MAAMC,GAAG,GAAGD,YAAY,GACpB,GAAGX,YAAY,mBAAmBW,YAAY,EAAE,GAChD,GAAGX,YAAY,iBAAiB;IACpC,MAAMG,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAACQ,GAAG,CAAC;IACrC,OAAOT,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED,MAAMQ,WAAWA,CAACR,IAAI,EAAE;IACtB,MAAMF,QAAQ,GAAG,MAAMJ,KAAK,CAACe,IAAI,CAAC,GAAGd,YAAY,iBAAiB,EAAEK,IAAI,CAAC;IACzE,OAAOF,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED,MAAMU,aAAaA,CAACC,EAAE,EAAE;IACtB,MAAMb,QAAQ,GAAG,MAAMJ,KAAK,CAACkB,MAAM,CAAC,GAAGjB,YAAY,mBAAmBgB,EAAE,EAAE,CAAC;IAC3E,OAAOb,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;EACA,MAAMa,iBAAiBA,CAACC,OAAO,EAAEC,QAAQ,EAAE;IACzC,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,KAAK,EAAE,IAAIC,IAAI,CAAC,CAACL,OAAO,CAAC,EAAE;MAAEM,IAAI,EAAE;IAAkB,CAAC,CAAC,EAAEL,QAAQ,CAAC;IAElF,MAAMjB,QAAQ,GAAG,MAAMJ,KAAK,CAACe,IAAI,CAAC,GAAGd,YAAY,cAAc,EAAEqB,QAAQ,EAAE;MACzEK,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IACF,OAAOvB,QAAQ,CAACE,IAAI;EACtB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}