{"ast":null,"code":"import Dexie from 'dexie';\n\n// Create a Dexie database\nconst db = new Dexie('paystubManager');\n\n// Define schema with versioning\ndb.version(1).stores({\n  individuals: '++id, name, address, phone_number, email',\n  paystubs: '++id, individualId, name, date, filename, extractionDate, amount, company, fileData'\n});\n\n// Database service\nexport const clientDb = {\n  // Individual operations\n  async getIndividuals() {\n    const individuals = await db.individuals.toArray();\n\n    // For each individual, calculate stats\n    const individualsWithStats = await Promise.all(individuals.map(async individual => {\n      const paystubs = await db.paystubs.where('individualId').equals(individual.id).toArray();\n      const paystubCount = paystubs.length;\n      const totalEarnings = paystubs.reduce((sum, paystub) => sum + (paystub.amount || 0), 0);\n      return {\n        ...individual,\n        paystubCount,\n        totalEarnings\n      };\n    }));\n    return individualsWithStats;\n  },\n  async getIndividualById(id) {\n    const individual = await db.individuals.get(id);\n    if (!individual) return null;\n    const paystubs = await db.paystubs.where('individualId').equals(individual.id).toArray();\n    const paystubCount = paystubs.length;\n    const totalEarnings = paystubs.reduce((sum, paystub) => sum + (paystub.amount || 0), 0);\n    return {\n      ...individual,\n      paystubCount,\n      totalEarnings\n    };\n  },\n  async getOrCreateIndividual(name) {\n    let individual = await db.individuals.where('name').equals(name).first();\n    if (!individual) {\n      const id = await db.individuals.add({\n        name,\n        address: '',\n        phone_number: '',\n        email: ''\n      });\n      individual = await db.individuals.get(id);\n    }\n    return individual;\n  },\n  async updateIndividualInfo(id, data) {\n    await db.individuals.update(id, data);\n    return this.getIndividualById(id);\n  },\n  // Paystub operations\n  async getPaystubs(individualId = null) {\n    if (individualId) {\n      return db.paystubs.where('individualId').equals(individualId).reverse().sortBy('date');\n    } else {\n      return db.paystubs.reverse().sortBy('date');\n    }\n  },\n  async addPaystub(data) {\n    // Extract name to ensure individual exists\n    const individual = await this.getOrCreateIndividual(data.name);\n\n    // Check if paystub already exists for this individual and date\n    const existingPaystub = await db.paystubs.where('individualId').equals(individual.id).and(paystub => paystub.date === data.date).first();\n    if (existingPaystub) {\n      console.log(`Paystub already exists for ${data.name} on ${data.date}. Skipping.`);\n      return false;\n    }\n\n    // Add new paystub\n    const paystubData = {\n      individualId: individual.id,\n      name: data.name,\n      date: data.date,\n      filename: data.filename,\n      extractionDate: new Date().toISOString().split('T')[0],\n      amount: data.amount || 0,\n      company: data.company || 'Unknown Company',\n      fileData: data.fileData\n    };\n    const id = await db.paystubs.add(paystubData);\n    console.log(`Added paystub for ${data.name}: ${data.filename}`);\n    return id;\n  },\n  async deletePaystub(id) {\n    await db.paystubs.delete(id);\n    return true;\n  },\n  // PDF processing\n  async processPdfs(results) {\n    const processed = [];\n    for (const result of results) {\n      const paystubData = {\n        name: result.name,\n        date: result.date,\n        filename: result.filename,\n        amount: result.amount,\n        company: result.company,\n        fileData: result.pdfBytes\n      };\n      const id = await this.addPaystub(paystubData);\n      if (id) {\n        processed.push(id);\n      }\n    }\n    return processed;\n  }\n};","map":{"version":3,"names":["Dexie","db","version","stores","individuals","paystubs","clientDb","getIndividuals","toArray","individualsWithStats","Promise","all","map","individual","where","equals","id","paystubCount","length","totalEarnings","reduce","sum","paystub","amount","getIndividualById","get","getOrCreateIndividual","name","first","add","address","phone_number","email","updateIndividualInfo","data","update","getPaystubs","individualId","reverse","sortBy","addPaystub","existingPaystub","and","date","console","log","paystubData","filename","extractionDate","Date","toISOString","split","company","fileData","deletePaystub","delete","processPdfs","results","processed","result","pdfBytes","push"],"sources":["/Users/mattermost/Documents/paystub/paystub-web/src/utils/clientDb.js"],"sourcesContent":["import Dexie from 'dexie';\n\n// Create a Dexie database\nconst db = new Dexie('paystubManager');\n\n// Define schema with versioning\ndb.version(1).stores({\n  individuals: '++id, name, address, phone_number, email',\n  paystubs: '++id, individualId, name, date, filename, extractionDate, amount, company, fileData',\n});\n\n// Database service\nexport const clientDb = {\n  // Individual operations\n  async getIndividuals() {\n    const individuals = await db.individuals.toArray();\n    \n    // For each individual, calculate stats\n    const individualsWithStats = await Promise.all(\n      individuals.map(async (individual) => {\n        const paystubs = await db.paystubs\n          .where('individualId')\n          .equals(individual.id)\n          .toArray();\n        \n        const paystubCount = paystubs.length;\n        const totalEarnings = paystubs.reduce((sum, paystub) => sum + (paystub.amount || 0), 0);\n        \n        return {\n          ...individual,\n          paystubCount,\n          totalEarnings,\n        };\n      })\n    );\n    \n    return individualsWithStats;\n  },\n  \n  async getIndividualById(id) {\n    const individual = await db.individuals.get(id);\n    if (!individual) return null;\n    \n    const paystubs = await db.paystubs\n      .where('individualId')\n      .equals(individual.id)\n      .toArray();\n    \n    const paystubCount = paystubs.length;\n    const totalEarnings = paystubs.reduce((sum, paystub) => sum + (paystub.amount || 0), 0);\n    \n    return {\n      ...individual,\n      paystubCount,\n      totalEarnings,\n    };\n  },\n  \n  async getOrCreateIndividual(name) {\n    let individual = await db.individuals.where('name').equals(name).first();\n    \n    if (!individual) {\n      const id = await db.individuals.add({\n        name,\n        address: '',\n        phone_number: '',\n        email: '',\n      });\n      individual = await db.individuals.get(id);\n    }\n    \n    return individual;\n  },\n  \n  async updateIndividualInfo(id, data) {\n    await db.individuals.update(id, data);\n    return this.getIndividualById(id);\n  },\n  \n  // Paystub operations\n  async getPaystubs(individualId = null) {\n    if (individualId) {\n      return db.paystubs\n        .where('individualId')\n        .equals(individualId)\n        .reverse()\n        .sortBy('date');\n    } else {\n      return db.paystubs.reverse().sortBy('date');\n    }\n  },\n  \n  async addPaystub(data) {\n    // Extract name to ensure individual exists\n    const individual = await this.getOrCreateIndividual(data.name);\n    \n    // Check if paystub already exists for this individual and date\n    const existingPaystub = await db.paystubs\n      .where('individualId')\n      .equals(individual.id)\n      .and(paystub => paystub.date === data.date)\n      .first();\n    \n    if (existingPaystub) {\n      console.log(`Paystub already exists for ${data.name} on ${data.date}. Skipping.`);\n      return false;\n    }\n    \n    // Add new paystub\n    const paystubData = {\n      individualId: individual.id,\n      name: data.name,\n      date: data.date,\n      filename: data.filename,\n      extractionDate: new Date().toISOString().split('T')[0],\n      amount: data.amount || 0,\n      company: data.company || 'Unknown Company',\n      fileData: data.fileData,\n    };\n    \n    const id = await db.paystubs.add(paystubData);\n    console.log(`Added paystub for ${data.name}: ${data.filename}`);\n    return id;\n  },\n  \n  async deletePaystub(id) {\n    await db.paystubs.delete(id);\n    return true;\n  },\n\n  // PDF processing\n  async processPdfs(results) {\n    const processed = [];\n    \n    for (const result of results) {\n      const paystubData = {\n        name: result.name,\n        date: result.date,\n        filename: result.filename,\n        amount: result.amount,\n        company: result.company,\n        fileData: result.pdfBytes,\n      };\n      \n      const id = await this.addPaystub(paystubData);\n      if (id) {\n        processed.push(id);\n      }\n    }\n    \n    return processed;\n  },\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,EAAE,GAAG,IAAID,KAAK,CAAC,gBAAgB,CAAC;;AAEtC;AACAC,EAAE,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,MAAM,CAAC;EACnBC,WAAW,EAAE,0CAA0C;EACvDC,QAAQ,EAAE;AACZ,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,QAAQ,GAAG;EACtB;EACA,MAAMC,cAAcA,CAAA,EAAG;IACrB,MAAMH,WAAW,GAAG,MAAMH,EAAE,CAACG,WAAW,CAACI,OAAO,CAAC,CAAC;;IAElD;IACA,MAAMC,oBAAoB,GAAG,MAAMC,OAAO,CAACC,GAAG,CAC5CP,WAAW,CAACQ,GAAG,CAAC,MAAOC,UAAU,IAAK;MACpC,MAAMR,QAAQ,GAAG,MAAMJ,EAAE,CAACI,QAAQ,CAC/BS,KAAK,CAAC,cAAc,CAAC,CACrBC,MAAM,CAACF,UAAU,CAACG,EAAE,CAAC,CACrBR,OAAO,CAAC,CAAC;MAEZ,MAAMS,YAAY,GAAGZ,QAAQ,CAACa,MAAM;MACpC,MAAMC,aAAa,GAAGd,QAAQ,CAACe,MAAM,CAAC,CAACC,GAAG,EAAEC,OAAO,KAAKD,GAAG,IAAIC,OAAO,CAACC,MAAM,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;MAEvF,OAAO;QACL,GAAGV,UAAU;QACbI,YAAY;QACZE;MACF,CAAC;IACH,CAAC,CACH,CAAC;IAED,OAAOV,oBAAoB;EAC7B,CAAC;EAED,MAAMe,iBAAiBA,CAACR,EAAE,EAAE;IAC1B,MAAMH,UAAU,GAAG,MAAMZ,EAAE,CAACG,WAAW,CAACqB,GAAG,CAACT,EAAE,CAAC;IAC/C,IAAI,CAACH,UAAU,EAAE,OAAO,IAAI;IAE5B,MAAMR,QAAQ,GAAG,MAAMJ,EAAE,CAACI,QAAQ,CAC/BS,KAAK,CAAC,cAAc,CAAC,CACrBC,MAAM,CAACF,UAAU,CAACG,EAAE,CAAC,CACrBR,OAAO,CAAC,CAAC;IAEZ,MAAMS,YAAY,GAAGZ,QAAQ,CAACa,MAAM;IACpC,MAAMC,aAAa,GAAGd,QAAQ,CAACe,MAAM,CAAC,CAACC,GAAG,EAAEC,OAAO,KAAKD,GAAG,IAAIC,OAAO,CAACC,MAAM,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;IAEvF,OAAO;MACL,GAAGV,UAAU;MACbI,YAAY;MACZE;IACF,CAAC;EACH,CAAC;EAED,MAAMO,qBAAqBA,CAACC,IAAI,EAAE;IAChC,IAAId,UAAU,GAAG,MAAMZ,EAAE,CAACG,WAAW,CAACU,KAAK,CAAC,MAAM,CAAC,CAACC,MAAM,CAACY,IAAI,CAAC,CAACC,KAAK,CAAC,CAAC;IAExE,IAAI,CAACf,UAAU,EAAE;MACf,MAAMG,EAAE,GAAG,MAAMf,EAAE,CAACG,WAAW,CAACyB,GAAG,CAAC;QAClCF,IAAI;QACJG,OAAO,EAAE,EAAE;QACXC,YAAY,EAAE,EAAE;QAChBC,KAAK,EAAE;MACT,CAAC,CAAC;MACFnB,UAAU,GAAG,MAAMZ,EAAE,CAACG,WAAW,CAACqB,GAAG,CAACT,EAAE,CAAC;IAC3C;IAEA,OAAOH,UAAU;EACnB,CAAC;EAED,MAAMoB,oBAAoBA,CAACjB,EAAE,EAAEkB,IAAI,EAAE;IACnC,MAAMjC,EAAE,CAACG,WAAW,CAAC+B,MAAM,CAACnB,EAAE,EAAEkB,IAAI,CAAC;IACrC,OAAO,IAAI,CAACV,iBAAiB,CAACR,EAAE,CAAC;EACnC,CAAC;EAED;EACA,MAAMoB,WAAWA,CAACC,YAAY,GAAG,IAAI,EAAE;IACrC,IAAIA,YAAY,EAAE;MAChB,OAAOpC,EAAE,CAACI,QAAQ,CACfS,KAAK,CAAC,cAAc,CAAC,CACrBC,MAAM,CAACsB,YAAY,CAAC,CACpBC,OAAO,CAAC,CAAC,CACTC,MAAM,CAAC,MAAM,CAAC;IACnB,CAAC,MAAM;MACL,OAAOtC,EAAE,CAACI,QAAQ,CAACiC,OAAO,CAAC,CAAC,CAACC,MAAM,CAAC,MAAM,CAAC;IAC7C;EACF,CAAC;EAED,MAAMC,UAAUA,CAACN,IAAI,EAAE;IACrB;IACA,MAAMrB,UAAU,GAAG,MAAM,IAAI,CAACa,qBAAqB,CAACQ,IAAI,CAACP,IAAI,CAAC;;IAE9D;IACA,MAAMc,eAAe,GAAG,MAAMxC,EAAE,CAACI,QAAQ,CACtCS,KAAK,CAAC,cAAc,CAAC,CACrBC,MAAM,CAACF,UAAU,CAACG,EAAE,CAAC,CACrB0B,GAAG,CAACpB,OAAO,IAAIA,OAAO,CAACqB,IAAI,KAAKT,IAAI,CAACS,IAAI,CAAC,CAC1Cf,KAAK,CAAC,CAAC;IAEV,IAAIa,eAAe,EAAE;MACnBG,OAAO,CAACC,GAAG,CAAC,8BAA8BX,IAAI,CAACP,IAAI,OAAOO,IAAI,CAACS,IAAI,aAAa,CAAC;MACjF,OAAO,KAAK;IACd;;IAEA;IACA,MAAMG,WAAW,GAAG;MAClBT,YAAY,EAAExB,UAAU,CAACG,EAAE;MAC3BW,IAAI,EAAEO,IAAI,CAACP,IAAI;MACfgB,IAAI,EAAET,IAAI,CAACS,IAAI;MACfI,QAAQ,EAAEb,IAAI,CAACa,QAAQ;MACvBC,cAAc,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACtD5B,MAAM,EAAEW,IAAI,CAACX,MAAM,IAAI,CAAC;MACxB6B,OAAO,EAAElB,IAAI,CAACkB,OAAO,IAAI,iBAAiB;MAC1CC,QAAQ,EAAEnB,IAAI,CAACmB;IACjB,CAAC;IAED,MAAMrC,EAAE,GAAG,MAAMf,EAAE,CAACI,QAAQ,CAACwB,GAAG,CAACiB,WAAW,CAAC;IAC7CF,OAAO,CAACC,GAAG,CAAC,qBAAqBX,IAAI,CAACP,IAAI,KAAKO,IAAI,CAACa,QAAQ,EAAE,CAAC;IAC/D,OAAO/B,EAAE;EACX,CAAC;EAED,MAAMsC,aAAaA,CAACtC,EAAE,EAAE;IACtB,MAAMf,EAAE,CAACI,QAAQ,CAACkD,MAAM,CAACvC,EAAE,CAAC;IAC5B,OAAO,IAAI;EACb,CAAC;EAED;EACA,MAAMwC,WAAWA,CAACC,OAAO,EAAE;IACzB,MAAMC,SAAS,GAAG,EAAE;IAEpB,KAAK,MAAMC,MAAM,IAAIF,OAAO,EAAE;MAC5B,MAAMX,WAAW,GAAG;QAClBnB,IAAI,EAAEgC,MAAM,CAAChC,IAAI;QACjBgB,IAAI,EAAEgB,MAAM,CAAChB,IAAI;QACjBI,QAAQ,EAAEY,MAAM,CAACZ,QAAQ;QACzBxB,MAAM,EAAEoC,MAAM,CAACpC,MAAM;QACrB6B,OAAO,EAAEO,MAAM,CAACP,OAAO;QACvBC,QAAQ,EAAEM,MAAM,CAACC;MACnB,CAAC;MAED,MAAM5C,EAAE,GAAG,MAAM,IAAI,CAACwB,UAAU,CAACM,WAAW,CAAC;MAC7C,IAAI9B,EAAE,EAAE;QACN0C,SAAS,CAACG,IAAI,CAAC7C,EAAE,CAAC;MACpB;IACF;IAEA,OAAO0C,SAAS;EAClB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}